import React, { useState, useRef, useEffect } from "react";
import {
  Button,
  Input,
  Row,
  Col,
  Typography,
  DatePicker,
  Modal,
  Select,
  Form,
  message,
} from "antd";
import {
  InfoCircleOutlined,
  HistoryOutlined,
  BarsOutlined,
} from "@ant-design/icons";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import "./InformationPage.css";

const { Title, Text } = Typography;
const { Option } = Select;

const InformationPage: React.FC = () => {
  const navigate = useNavigate();
  const [userInfo, setUserInfo] = useState({
    name: "",
    email: "",
    phone: "",
    gender: "",
    budget: "",
  });

  const [userId, setUserId] = useState<number | null>(null);
  const [openDropdown, setOpenDropdown] = useState(false);
  const [isLogoutModalVisible, setIsLogoutModalVisible] = useState(false);
  const [isChangeInfoVisible, setIsChangeInfoVisible] = useState(false);
  const [isChangePassVisible, setIsChangePassVisible] = useState(false);

  const [passwordData, setPasswordData] = useState({
    oldPassword: "",
    newPassword: "",
    confirmPassword: "",
  });

  // üÜï State cho ng√¢n s√°ch th√°ng
  const [selectedMonth, setSelectedMonth] = useState<string>("");
  const [monthlyBudget, setMonthlyBudget] = useState<string>("");
  const [remainingMoney, setRemainingMoney] = useState<number>(0);

  const dropdownRef = useRef<HTMLDivElement>(null);
  const [formInfo] = Form.useForm();
  const [formPass] = Form.useForm();

  // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
  useEffect(() => {
    const id = localStorage.getItem("userId");
    if (id) {
      setUserId(Number(id));
      axios.get(`http://localhost:8080/profiles/${id}`).then((res) => {
        setUserInfo(res.data);
        formInfo.setFieldsValue(res.data);
      });
    } else {
      message.error("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
      window.location.href = "/userlogin";
    }
  }, [formInfo]);

  // ·∫®n dropdown khi click ra ngo√†i
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        dropdownRef.current &&
        !dropdownRef.current.contains(event.target as Node)
      ) {
        setOpenDropdown(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  // --- ƒêƒÉng xu·∫•t ---
  const handleLogoutClick = () => setIsLogoutModalVisible(true);
  const handleConfirmLogout = () => {
    localStorage.removeItem("token");
    localStorage.removeItem("userId");
    window.location.href = "/userlogin";
    setIsLogoutModalVisible(false);
  };
  const handleCancelLogout = () => setIsLogoutModalVisible(false);

  // --- L∆∞u th√¥ng tin c√° nh√¢n ---
  const handleSaveInfo = async () => {
    try {
      const values = await formInfo.validateFields();
      if (!userId) return;
      await axios.put(`http://localhost:8080/profiles/${userId}`, values);
      setUserInfo(values);
      message.success("C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!");
      setIsChangeInfoVisible(false);
    } catch {
      message.error("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
    }
  };

  // --- ƒê·ªïi m·∫≠t kh·∫©u ---
  const handleSavePassword = async () => {
    try {
      const values = await formPass.validateFields();
      if (!userId) return;

      const res = await axios.get(`http://localhost:8080/users/${userId}`);
      const user = res.data;

      if (values.oldPassword !== user.password) {
        message.error("M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng!");
        return;
      }
      if (values.newPassword !== values.confirmPassword) {
        message.error("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng tr√πng kh·ªõp!");
        return;
      }

      await axios.put(`http://localhost:8080/users/${userId}`, {
        ...user,
        password: values.newPassword,
      });

      message.success("ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!");
      setIsChangePassVisible(false);
      formPass.resetFields();
    } catch {
      message.error("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß v√† ch√≠nh x√°c th√¥ng tin!");
    }
  };

  // --- üÜï L∆∞u ng√¢n s√°ch th√°ng ---
  const handleSaveMonthlyBudget = async () => {
    if (!selectedMonth) {
      message.warning("Vui l√≤ng ch·ªçn th√°ng!");
      return;
    }
    if (!monthlyBudget) {
      message.warning("Vui l√≤ng nh·∫≠p ng√¢n s√°ch!");
      return;
    }

    try {
      const res = await axios.get(
        `http://localhost:8080/monthlyBudgets?month=${selectedMonth}`
      );
      const existing = res.data[0];

      if (existing) {
        await axios.put(`http://localhost:8080/monthlyBudgets/${existing.id}`, {
          ...existing,
          budget: Number(monthlyBudget),
        });
        message.success("C·∫≠p nh·∫≠t ng√¢n s√°ch th√°ng th√†nh c√¥ng!");
      } else {
        await axios.post(`http://localhost:8080/monthlyBudgets`, {
          month: selectedMonth,
          budget: Number(monthlyBudget),
        });
        message.success("Th√™m ng√¢n s√°ch th√°ng m·ªõi th√†nh c√¥ng!");
      }

      fetchTransactionsAndCalculate(Number(monthlyBudget));
    } catch (error) {
      message.error("Kh√¥ng th·ªÉ l∆∞u ng√¢n s√°ch!");
    }
  };

  // --- üÜï L·∫•y ng√¢n s√°ch & giao d·ªãch khi ch·ªçn th√°ng ---
  useEffect(() => {
    const fetchBudget = async () => {
      if (!selectedMonth) return;
      try {
        const res = await axios.get(
          `http://localhost:8080/monthlyBudgets?month=${selectedMonth}`
        );
        if (res.data.length > 0) {
          const budgetValue = res.data[0].budget;
          setMonthlyBudget(budgetValue.toString());
          fetchTransactionsAndCalculate(budgetValue);
        } else {
          setMonthlyBudget("");
          setRemainingMoney(0);
        }
      } catch {
        message.error("Kh√¥ng th·ªÉ t·∫£i ng√¢n s√°ch th√°ng!");
      }
    };
    fetchBudget();
  }, [selectedMonth]);

  // üßÆ T√≠nh s·ªë ti·ªÅn c√≤n l·∫°i
  const fetchTransactionsAndCalculate = async (budgetValue: number) => {
    try {
      const monthData = await axios.get(
        `http://localhost:8080/monthlyCategories?month=${selectedMonth}`
      );

      if (monthData.data.length === 0) {
        setRemainingMoney(budgetValue);
        return;
      }

      const monthlyCategoryId = monthData.data[0].id;
      const transRes = await axios.get(
        `http://localhost:8080/transactions?monthlyCategoryId=${monthlyCategoryId}`
      );
      const totalSpent = transRes.data.reduce(
        (sum: number, t: any) => sum + t.total,
        0
      );

      setRemainingMoney(budgetValue - totalSpent);
    } catch {
      setRemainingMoney(budgetValue);
    }
  };

  return (
    <div className="page-root">
      <header className="app-header">
        <div className="header-left">üìí T√†i Ch√≠nh C√° Nh√¢n K24_Rikkei</div>

        <div
          className="header-right"
          onClick={() => setOpenDropdown(!openDropdown)}
          ref={dropdownRef}
        >
          <span>T√†i kho·∫£n</span>
          <span className="arrow-down">&#8744;</span>

          {openDropdown && (
            <div className="dropdown-menu">
              <div className="dropdown-item" onClick={handleLogoutClick}>
                ƒêƒÉng xu·∫•t
              </div>
            </div>
          )}
        </div>
      </header>

      <div className="main-wrap">
        <aside className="sidebar">
          <Button
            type="primary"
            icon={<InfoCircleOutlined />}
            className="side-btn active"
            block
            onClick={() => navigate("/information")}
          >
            Information
          </Button>
          <Button
            icon={<BarsOutlined />}
            className="side-btn"
            block
            onClick={() => navigate("/categoryUser")}
          >
            Category
          </Button>
          <Button
            icon={<HistoryOutlined />}
            className="side-btn"
            block
            onClick={() => navigate("/history")}
          >
            History
          </Button>
        </aside>

        <section className="content">
          <div className="banner">
            <div className="banner-title">üéØ Ki·ªÉm so√°t chi ti√™u th√¥ng minh</div>
            <div className="banner-sub">
              Theo d√µi ng√¢n s√°ch v√† thu chi h√†ng th√°ng d·ªÖ d√†ng
            </div>
          </div>

          <div className="center-column">
            <Title level={3} className="page-title">
              üìä Qu·∫£n L√Ω T√†i Ch√≠nh C√° Nh√¢n
            </Title>

            {/* --- S·ªë ti·ªÅn c√≤n l·∫°i --- */}
            <div className="card money-card">
              <Text className="muted">üíµ S·ªë ti·ªÅn c√≤n l·∫°i</Text>
              <div className="big-green">
                {remainingMoney.toLocaleString()} VND
              </div>
            </div>

            {/* --- Ch·ªçn th√°ng & ng√¢n s√°ch --- */}
            <div className="card month-card">
              <Text className="muted">üìÖ Ch·ªçn th√°ng:</Text>
              <DatePicker
                picker="month"
                style={{ width: 220 }}
                onChange={(date, dateString) => setSelectedMonth(dateString)}
              />
            </div>

            <div className="card budget-card">
              <span className="emoji">üí∞ Ng√¢n s√°ch th√°ng:</span>
              <Input
                placeholder="VD: 5000000"
                value={monthlyBudget}
                onChange={(e) => setMonthlyBudget(e.target.value)}
                style={{ width: 220 }}
              />
              <Button
                type="primary"
                onClick={handleSaveMonthlyBudget}
                className="save-btn"
              >
                L∆∞u
              </Button>
            </div>

            {/* --- Th√¥ng tin c√° nh√¢n --- */}
            <div className="card user-card">
              <Title level={4} className="section-title">
                Qu·∫£n L√Ω Th√¥ng tin c√° nh√¢n
              </Title>

              <Row gutter={[24, 16]}>
                <Col span={12}>
                  <Text strong className="label">
                    Name <span className="required">*</span>
                  </Text>
                  <Input value={userInfo.name} disabled />
                </Col>
                <Col span={12}>
                  <Text strong className="label">
                    Email <span className="required">*</span>
                  </Text>
                  <Input value={userInfo.email} disabled />
                </Col>
                <Col span={12}>
                  <Text strong className="label">
                    Phone <span className="required">*</span>
                  </Text>
                  <Input value={userInfo.phone} disabled />
                </Col>
                <Col span={12}>
                  <Text strong className="label">
                    Gender <span className="required">*</span>
                  </Text>
                  <Input value={userInfo.gender} disabled />
                </Col>
              </Row>

              <div className="action-row">
                <Button
                  className="purple-btn"
                  onClick={() => setIsChangeInfoVisible(true)}
                >
                  Change Information
                </Button>
                <Button
                  className="purple-btn"
                  onClick={() => setIsChangePassVisible(true)}
                >
                  Change Password
                </Button>
              </div>
            </div>
          </div>
        </section>
      </div>

      {/* Modal ch·ªânh s·ª≠a th√¥ng tin */}
      <Modal
        title="Ch·ªânh s·ª≠a th√¥ng tin c√° nh√¢n"
        open={isChangeInfoVisible}
        onOk={handleSaveInfo}
        onCancel={() => setIsChangeInfoVisible(false)}
        okText="L∆∞u"
        cancelText="H·ªßy"
      >
        <Form layout="vertical" form={formInfo}>
          <Form.Item
            label="Name"
            name="name"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p h·ªç t√™n!" }]}
          >
            <Input placeholder="H·ªç v√† t√™n" />
          </Form.Item>

          <Form.Item
            label="Email"
            name="email"
            rules={[
              { required: true, message: "Vui l√≤ng nh·∫≠p email!" },
              { type: "email", message: "Email kh√¥ng h·ª£p l·ªá!" },
            ]}
          >
            <Input placeholder="Email" />
          </Form.Item>

          <Form.Item
            label="Phone"
            name="phone"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i!" }]}
          >
            <Input placeholder="S·ªë ƒëi·ªán tho·∫°i" />
          </Form.Item>

          <Form.Item
            label="Gender"
            name="gender"
            rules={[{ required: true, message: "Vui l√≤ng ch·ªçn gi·ªõi t√≠nh!" }]}
          >
            <Select placeholder="Ch·ªçn gi·ªõi t√≠nh">
              <Option value="Male">Male</Option>
              <Option value="Female">Female</Option>
            </Select>
          </Form.Item>
        </Form>
      </Modal>

      {/* Modal ƒë·ªïi m·∫≠t kh·∫©u */}
      <Modal
        title="ƒê·ªïi m·∫≠t kh·∫©u"
        open={isChangePassVisible}
        onOk={handleSavePassword}
        onCancel={() => setIsChangePassVisible(false)}
        okText="L∆∞u"
        cancelText="H·ªßy"
      >
        <Form layout="vertical" form={formPass}>
          <Form.Item
            label="M·∫≠t kh·∫©u c≈©"
            name="oldPassword"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u c≈©!" }]}
          >
            <Input.Password />
          </Form.Item>

          <Form.Item
            label="M·∫≠t kh·∫©u m·ªõi"
            name="newPassword"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi!" }]}
          >
            <Input.Password />
          </Form.Item>

          <Form.Item
            label="X√°c nh·∫≠n m·∫≠t kh·∫©u"
            name="confirmPassword"
            dependencies={["newPassword"]}
            rules={[
              { required: true, message: "Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u!" },
              ({ getFieldValue }) => ({
                validator(_, value) {
                  if (!value || getFieldValue("newPassword") === value)
                    return Promise.resolve();
                  return Promise.reject(
                    new Error("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng tr√πng kh·ªõp!")
                  );
                },
              }),
            ]}
          >
            <Input.Password />
          </Form.Item>
        </Form>
      </Modal>

      {/* Modal x√°c nh·∫≠n ƒëƒÉng xu·∫•t */}
      <Modal
        title="X√°c nh·∫≠n ƒëƒÉng xu·∫•t"
        open={isLogoutModalVisible}
        onOk={handleConfirmLogout}
        onCancel={handleCancelLogout}
        okText="ƒêƒÉng xu·∫•t"
        cancelText="H·ªßy"
      >
        <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t kh√¥ng?</p>
      </Modal>
    </div>
  );
};

export default InformationPage;
